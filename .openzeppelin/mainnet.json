{
  "manifestVersion": "3.2",
  "proxies": [
    {
      "address": "0xfc1d377b1bdd82731872cb9a7c823961d00f5c10",
      "txHash": "0xddd04998e450de3182155db2b2b9df796227be7b891fed9df356b609d790f1a7",
      "kind": "uups"
    },
    {
      "address": "0xe27f2675046b150d033ab62927215fe2eb943ac0",
      "txHash": "0x27d107fb19a56f59984b3b25e9abecc3e779f398a2dab16a9e2d6fdf7db5cd47",
      "kind": "uups"
    },
    {
      "address": "0x9c1de963f7935e362f7b6531bf962c56bf37476e",
      "txHash": "0xde5ef22a0cb0ebbf251c4b3578f664aff2803e1089d3b97286ccad2466bde00a View in Tenderly ",
      "kind": "uups"
    }
  ],
  "impls": {
    "0c9a40ef4cbaf3418e80bd7029c384491feaaad4dcee53c05782b01982a528c5": {
      "address": "0x36BAe88Cb53264662DB66dB6aC6C7830Dbb9E8EA",
      "txHash": "0xa23ddfd19aee2d1db424702f55d809a96e5c9f3390576a7897acdb80dcac89fe",
      "layout": {
        "solcVersion": "0.8.23",
        "storage": [
          {
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)3798",
            "contract": "BaseStakingRewardDistributor",
            "src": "contracts/tokenomics/staking/BaseStakingRewardDistributor.sol:43"
          },
          {
            "label": "rewardTokenInfo",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_struct(RewardTokenInfo)10019_storage)dyn_storage",
            "contract": "BaseStakingRewardDistributor",
            "src": "contracts/tokenomics/staking/BaseStakingRewardDistributor.sol:46"
          },
          {
            "label": "rewardTokenTidByAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "BaseStakingRewardDistributor",
            "src": "contracts/tokenomics/staking/BaseStakingRewardDistributor.sol:47"
          },
          {
            "label": "claimableRewards",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "contract": "BaseStakingRewardDistributor",
            "src": "contracts/tokenomics/staking/BaseStakingRewardDistributor.sol:51"
          },
          {
            "label": "claimedRewards",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "contract": "BaseStakingRewardDistributor",
            "src": "contracts/tokenomics/staking/BaseStakingRewardDistributor.sol:55"
          },
          {
            "label": "rewardsReceiver",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_address)",
            "contract": "BaseStakingRewardDistributor",
            "src": "contracts/tokenomics/staking/BaseStakingRewardDistributor.sol:58"
          },
          {
            "label": "userRewardDistribution",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "BaseStakingRewardDistributor",
            "src": "contracts/tokenomics/staking/BaseStakingRewardDistributor.sol:61"
          },
          {
            "label": "totalAmount",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "BaseStakingRewardDistributor",
            "src": "contracts/tokenomics/staking/BaseStakingRewardDistributor.sol:63"
          },
          {
            "label": "userLocks",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_array(t_struct(LockInfo)11131_storage)dyn_storage)",
            "contract": "ZUNStakingRewardDistributor",
            "src": "contracts/tokenomics/staking/ZUNStakingRewardDistributor.sol:47"
          },
          {
            "label": "recapitalizedAmount",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256",
            "contract": "ZUNStakingRewardDistributor",
            "src": "contracts/tokenomics/staking/ZUNStakingRewardDistributor.sol:49"
          },
          {
            "label": "earlyExitReceiver",
            "offset": 0,
            "slot": "10",
            "type": "t_address",
            "contract": "ZUNStakingRewardDistributor",
            "src": "contracts/tokenomics/staking/ZUNStakingRewardDistributor.sol:51"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_struct(LockInfo)11131_storage)dyn_storage": {
            "label": "struct ZUNStakingRewardDistributor.LockInfo[]",
            "numberOfBytes": "32"
          },
          "t_array(t_struct(RewardTokenInfo)10019_storage)dyn_storage": {
            "label": "struct BaseStakingRewardDistributor.RewardTokenInfo[]",
            "numberOfBytes": "32"
          },
          "t_contract(IERC20)3798": {
            "label": "contract IERC20",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_array(t_struct(LockInfo)11131_storage)dyn_storage)": {
            "label": "mapping(address => struct ZUNStakingRewardDistributor.LockInfo[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_struct(LockInfo)11131_storage": {
            "label": "struct ZUNStakingRewardDistributor.LockInfo",
            "members": [
              {
                "label": "amount",
                "type": "t_uint128",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "untilBlock",
                "type": "t_uint128",
                "offset": 16,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RewardTokenInfo)10019_storage": {
            "label": "struct BaseStakingRewardDistributor.RewardTokenInfo",
            "members": [
              {
                "label": "token",
                "type": "t_contract(IERC20)3798",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "balance",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "distribution",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_uint128": {
            "label": "uint128",
            "numberOfBytes": "16"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)25_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)25_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "hasRole",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(Trace208)8650_storage)": {
            "label": "mapping(address => struct Checkpoints.Trace208)"
          },
          "t_struct(Trace208)8650_storage": {
            "label": "struct Checkpoints.Trace208",
            "members": [
              {
                "label": "_checkpoints",
                "type": "t_array(t_struct(Checkpoint208)8655_storage)dyn_storage"
              }
            ]
          },
          "t_array(t_struct(Checkpoint208)8655_storage)dyn_storage": {
            "label": "struct Checkpoints.Checkpoint208[]"
          },
          "t_struct(Checkpoint208)8655_storage": {
            "label": "struct Checkpoints.Checkpoint208",
            "members": [
              {
                "label": "_key",
                "type": "t_uint48"
              },
              {
                "label": "_value",
                "type": "t_uint208"
              }
            ]
          },
          "t_uint48": {
            "label": "uint48"
          },
          "t_uint208": {
            "label": "uint208"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_uint64": {
            "label": "uint64"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.ReentrancyGuard": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
            }
          ],
          "erc7201:openzeppelin.storage.AccessControl": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            }
          ],
          "erc7201:openzeppelin.storage.Votes": [
            {
              "contract": "VotesUpgradeable",
              "label": "_delegatee",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/governance/utils/VotesUpgradeable.sol:41"
            },
            {
              "contract": "VotesUpgradeable",
              "label": "_delegateCheckpoints",
              "type": "t_mapping(t_address,t_struct(Trace208)8650_storage)",
              "src": "@openzeppelin/contracts-upgradeable/governance/utils/VotesUpgradeable.sol:43"
            },
            {
              "contract": "VotesUpgradeable",
              "label": "_totalCheckpoints",
              "type": "t_struct(Trace208)8650_storage",
              "src": "@openzeppelin/contracts-upgradeable/governance/utils/VotesUpgradeable.sol:45"
            }
          ],
          "erc7201:openzeppelin.storage.Nonces": [
            {
              "contract": "NoncesUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol:17"
            }
          ],
          "erc7201:openzeppelin.storage.EIP712": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_hashedName",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:39"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_hashedVersion",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:41"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:43"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_version",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44"
            }
          ],
          "erc7201:openzeppelin.storage.ERC20": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:45"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
            }
          ]
        }
      }
    },
    "e1466ef282a16047cb4ea2f262d35c7b276584200aa0a93ad2fbd43db5e07f8d": {
      "address": "0x43f18f589fe1a884bb77267b87bac96449365a92",
      "txHash": "",
      "layout": {
        "solcVersion": "0.8.23",
        "storage": [
          {
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)5027",
            "contract": "BaseStakingRewardDistributor",
            "src": "contracts/tokenomics/staking/BaseStakingRewardDistributor.sol:43"
          },
          {
            "label": "rewardTokenInfo",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_struct(RewardTokenInfo)27914_storage)dyn_storage",
            "contract": "BaseStakingRewardDistributor",
            "src": "contracts/tokenomics/staking/BaseStakingRewardDistributor.sol:46"
          },
          {
            "label": "rewardTokenTidByAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "BaseStakingRewardDistributor",
            "src": "contracts/tokenomics/staking/BaseStakingRewardDistributor.sol:47"
          },
          {
            "label": "claimableRewards",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "contract": "BaseStakingRewardDistributor",
            "src": "contracts/tokenomics/staking/BaseStakingRewardDistributor.sol:51"
          },
          {
            "label": "claimedRewards",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "contract": "BaseStakingRewardDistributor",
            "src": "contracts/tokenomics/staking/BaseStakingRewardDistributor.sol:55"
          },
          {
            "label": "rewardsReceiver",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_address)",
            "contract": "BaseStakingRewardDistributor",
            "src": "contracts/tokenomics/staking/BaseStakingRewardDistributor.sol:58"
          },
          {
            "label": "userRewardDistribution",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "BaseStakingRewardDistributor",
            "src": "contracts/tokenomics/staking/BaseStakingRewardDistributor.sol:61"
          },
          {
            "label": "totalAmount",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "BaseStakingRewardDistributor",
            "src": "contracts/tokenomics/staking/BaseStakingRewardDistributor.sol:63"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_struct(RewardTokenInfo)27914_storage)dyn_storage": {
            "label": "struct BaseStakingRewardDistributor.RewardTokenInfo[]",
            "numberOfBytes": "32"
          },
          "t_contract(IERC20)5027": {
            "label": "contract IERC20",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_struct(RewardTokenInfo)27914_storage": {
            "label": "struct BaseStakingRewardDistributor.RewardTokenInfo",
            "members": [
              {
                "label": "token",
                "type": "t_contract(IERC20)5027",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "balance",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "distribution",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)25_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_struct(RoleData)25_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "hasRole",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_uint64": {
            "label": "uint64"
          }
        },
        "namespaces": {
          "erc7201:openzeppelin.storage.ReentrancyGuard": [
            {
              "contract": "ReentrancyGuardUpgradeable",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
            }
          ],
          "erc7201:openzeppelin.storage.AccessControl": [
            {
              "contract": "AccessControlUpgradeable",
              "label": "_roles",
              "type": "t_mapping(t_bytes32,t_struct(RoleData)25_storage)",
              "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
            }
          ],
          "erc7201:openzeppelin.storage.Nonces": [
            {
              "contract": "NoncesUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol:17"
            }
          ],
          "erc7201:openzeppelin.storage.EIP712": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_hashedName",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:39"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_hashedVersion",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:41"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:43"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_version",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44"
            }
          ],
          "erc7201:openzeppelin.storage.ERC20": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:45"
            }
          ],
          "erc7201:openzeppelin.storage.Initializable": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_uint64",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
            }
          ]
        }
      }
    }
  }
}
